name: Nix
on:
  pull_request:
  push:
    branches: [master]

permissions:
  id-token: "write"
  contents: "read"

jobs:
  lints:
    name: Build and Check with default GHC on ${{ matrix.nixpkgs }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        nixpkgs: [nixos-unstable, nixos-25.05]
    env:
      drv: .#packages.x86_64-linux.default
    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/flake-checker-action@main
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Use ${{ matrix.nixpkgs }}
        if: matrix.nixpkgs != 'nixos-unstable'
        run: nix flake update nixpkgs --override-input nixpkgs github:NixOS/nixpkgs/${{ matrix.nixpkgs }}
      - name: Nix build dependencies
        run: nix develop --print-build-logs $drv --command ghc-pkg list
      - name: Nix build
        run: nix build --print-build-logs $drv
      - run: nix flake check --print-build-logs
      - name: Run `nix-build` using overlay on ${{ matrix.nixpkgs }}
        if: false  # TODO: needs overlays from gtk-strut, gtk-sni-tray, etc.
        run: nix-build -I nixpkgs=flake:github:NixOS/nixpkgs/${{ matrix.nixpkgs }} '<nixpkgs>' --arg overlays '[(import ./nix/overlay.nix)]' -A pkgs.haskellPackages.taffybar

  build:
    name: Build with ${{ matrix.compiler }}
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [ghc98]
        experimental: [false]
        # include:
        #   - compiler: ghc912
        #     experimental: true
    env:
      drv: .#packages.x86_64-linux.${{ matrix.compiler }}-taffybar
    steps:
      - uses: actions/checkout@main
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Nix build dependencies for ${{ matrix.compiler }}
        run: nix develop -L $drv --command ghc-pkg list
      - name: Nix build for ${{ matrix.compiler }}
        run: nix build -L $drv
